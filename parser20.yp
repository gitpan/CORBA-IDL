/*
 *	Interface Definition Language (OMG IDL CORBA v2.0)
 */

%token	IDENTIFIER
%token	INTEGER_LITERAL
%token	STRING_LITERAL
%token	CHARACTER_LITERAL
%token	FLOATING_PT_LITERAL
	/*	Keyword		*/
%token	ANY
%token	ATTRIBUTE
%token	BOOLEAN
%token	CASE
%token	CHAR
%token	CONST
%token	CONTEXT
%token	DEFAULT
%token	DOUBLE
%token	ENUM
%token	EXCEPTION
%token	FALSE
%token	FLOAT
%token	IN
%token	INOUT
%token	INTERFACE
%token	LONG
%token	MODULE
%token	OCTET
%token	ONEWAY
%token	OUT
%token	RAISES
%token	READONLY
%token	SEQUENCE
%token	SHORT
%token	STRING
%token	STRUCT
%token	SWITCH
%token	TRUE
%token	TYPEDEF
%token	UNION
%token	UNSIGNED
%token	VOID

%start	specification

%%

/* 1 */		/* 3.5	OMG IDL Specification */
specification
:	definitions
		{
			$_[0]->YYData->{root} = new Specification($_[0],
					'list_decl'			=>	$_[1],
			);
		}
|	/* empty */
		{
			$_[0]->Error("Empty specification\n");
		}
|	error
		{
			$_[0]->Error("definition declaration excepted.\n");
		}
;

definitions
:	definition							{ [$_[1]]; }
|	definition	definitions				{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 2 */
definition
:	type_dcl	';'						#default action
|	const_dcl	';'						#default action
|	except_dcl	';'						#default action
|	interface	';'						#default action
|	module		';'						#default action
|	type_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	const_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	except_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	interface	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	module		error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
;

/* 3 */		/* 3.5.1	Module Declaration */
module
:	module_header	'{'	definitions	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentRoot($_[1]);
			$_[1]->configure('list_decl' => $_[3])
					if (defined $_[1]);
		}
|	module_header	'{'	error		'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentRoot($_[1]);
			$_[0]->Error("definition declaration excepted.\n");
			$_[0]->YYErrok();
		}
|	module_header	error
		{
			$_[0]->YYData->{symbtab}->PopCurrentRoot($_[1]);
			$_[0]->Error("'\x7b' excepted.\n");
			$_[0]->YYErrok();
		}
;

module_header
:	MODULE	IDENTIFIER
		{
			new Module($_[0],
					'idf'				=>	$_[2],
			);
		}
|	MODULE	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 4 */		/* 3.5.2	Interface Declaration */
interface
:	interface_dcl						#default action
|	forward_dcl							#default action
;

/* 5 */
interface_dcl
:	interface_header	'{'	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->YYData->{curr_itf} = undef;
			$_[1]->configure('list_decl'		=>	[]);
		}
|	interface_header	'{'	interface_body	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->YYData->{curr_itf} = undef;
			$_[1]->configure('list_decl'		=>	$_[3]);
		}
|	interface_header	'{'	error			'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->YYData->{curr_itf} = undef;
			$_[0]->Error("export declaration excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 6 */
forward_dcl
:	INTERFACE	IDENTIFIER
		{
			new ForwardInterface($_[0],
					'idf'					=>	$_[2]
			);
		}
|	INTERFACE	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 7 */
interface_header
:	INTERFACE	IDENTIFIER
		{
			new Interface($_[0],
					'idf'					=>	$_[2]
			);
		}
|	INTERFACE	IDENTIFIER	interface_inheritance_spec
		{
			new Interface($_[0],
					'idf'					=>	$_[2],
					'list_inheritance'		=>	$_[3]
			);
		}
;

/* 8 */
interface_body
:	exports								#default action
;

exports
:	export                      		{ [$_[1]]; }
|	export	exports						{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 9 */
export
:	type_dcl	';'						#default action
|	const_dcl	';'						#default action
|	except_dcl	';'						#default action
|	attr_dcl	';'						#default action
|	op_dcl		';'						#default action
|	type_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	const_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	except_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	attr_dcl	error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
|	op_dcl		error
		{
			$_[0]->Warning("';' excepted.\n");
			$_[0]->YYErrok();
			$_[1];						#default action
		}
;

/* 10 */
interface_inheritance_spec
:	':'	interface_names					{ $_[2]; }
|	':'	error
		{
			$_[0]->Error("Interface name excepted.\n");
			$_[0]->YYErrok();
		}
;

interface_names
:	interface_name						{ [$_[1]]; }
|	interface_name	','	interface_names	{ unshift(@{$_[3]},$_[1]); $_[3]; }
;

interface_name
:	scoped_name
		{
				Interface->Lookup($_[0],$_[1])
		}
;

/* 11 */
scoped_name
:	IDENTIFIER							#default action
|	'::'	IDENTIFIER
		{
			$_[1] . $_[2];
		}
|	'::'	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
			'';
		}
|	scoped_name	'::'	IDENTIFIER
		{
			$_[1] . $_[2] . $_[3];
		}
|	scoped_name	'::'	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
			$_[1];
		}
;

/* 12 */	/* 3.7	Constant Declaration */
const_dcl
:	CONST	const_type	IDENTIFIER	'='	const_exp
		{
			new Constant($_[0],
					'type'				=>	$_[2],
					'idf'				=>	$_[3],
					'list_expr'			=>	$_[5]
			);
		}
|	CONST	const_type	IDENTIFIER	'='	error
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
|	CONST	const_type	IDENTIFIER	error
		{
			$_[0]->Error("'=' excepted.\n");
			$_[0]->YYErrok();
		}
|	CONST	const_type	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
|	CONST	error
		{
			$_[0]->Error("const_type excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 13 */
const_type
:	integer_type						#default action
|	char_type							#default action
|	boolean_type						#default action
|	floating_pt_type					#default action
|	string_type							#default action
|	scoped_name
		{
			TypeDeclarator->Lookup($_[0],$_[1]);
		}
;

/* 14 */
const_exp
:	or_expr								#default action
;

/* 15 */
or_expr
:	xor_expr							#default action
|	or_expr		'|'		xor_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 16 */
xor_expr
:	and_expr							#default action
|	xor_expr	'^'		and_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 17 */
and_expr
:	shift_expr							#default action
|	and_expr	'&'		shift_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 18 */
shift_expr
:	add_expr							#default action
|	shift_expr	'>>'	add_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
|	shift_expr	'<<'	add_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 19 */
add_expr
:	mult_expr							#default action
|	add_expr	'+'		mult_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
|	add_expr	'-'		mult_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 20 */
mult_expr
:	unary_expr							#default action
|	mult_expr	'*'		unary_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
|	mult_expr	'/'		unary_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
|	mult_expr	'%'		unary_expr
		{
			BuildBinop($_[1],$_[2],$_[3]);
		}
;

/* 21 */
unary_expr
:	unary_operator	primary_expr
		{
			BuildUnop($_[1],$_[2]);
		}
|	primary_expr						#default action
;

/* 22 */
unary_operator
:	'-'									#default action
|	'+'									#default action
|	'~'									#default action
;

/* 23 */
primary_expr
:	scoped_name
		{
			[
				Constant->Lookup($_[0],$_[1])
			];
		}
|	literal
		{
			[ $_[1] ];
		}
|	'('	const_exp	')'
		{
			$_[2];
		}
|	'('	error		')'
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 24 */
literal
:	INTEGER_LITERAL
		{
			new IntegerLiteral($_[0],
					'value'				=>	$_[1],
					'lexeme'			=>	$_[0]->YYData->{lexeme}
			);
		}
|	string_literal
		{
			new StringLiteral($_[0],
					'value'				=>	$_[1]
			);
		}
|	CHARACTER_LITERAL
		{
			new CharacterLiteral($_[0],
					'value'				=>	$_[1]
			);
		}
|	FLOATING_PT_LITERAL
		{
			new FloatingPtLiteral($_[0],
					'value'				=>	$_[1],
					'lexeme'			=>	$_[0]->YYData->{lexeme}
			);
		}
|	boolean_literal						#default action
;

string_literal
:	STRING_LITERAL
|	STRING_LITERAL	string_literal		{ $_[1] . $_[2]; }
;

/* 25 */
boolean_literal
:	TRUE
		{
			new BooleanLiteral($_[0],
					'value'				=>	1
			);
		}
|	FALSE
		{
			new BooleanLiteral($_[0],
					'value'				=>	0
			);
		}
;

/* 26 */
positive_int_const
:	const_exp
		{
			new Expression($_[0],
					'list_expr'			=>	$_[1]
			);
		}
;

/* 27 */	/* 3.8		Type Declaration */
type_dcl
:	TYPEDEF		type_declarator
		{
			$_[2];
		}
|	struct_type							#default action
|	union_type							#default action
|	enum_type							#default action
|	TYPEDEF		error
		{
			$_[0]->Error("type_declarator excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 28 */
type_declarator
:	type_spec	declarators
		{
			new TypeDeclarators($_[0],
					'type'				=>	$_[1],
					'list_expr'			=>	$_[2]
			);
		}
|	type_spec	error
		{
			$_[0]->Error("declarator excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 29 */
type_spec
:	simple_type_spec					#default action
|	constr_type_spec					#default action
;

/* 30 */
simple_type_spec
:	base_type_spec						#default action
|	template_type_spec					#default action
|	scoped_name
		{
			TypeDeclarator->Lookup($_[0],$_[1]);
		}
;

/* 31 */
base_type_spec
:	floating_pt_type					#default action
|	integer_type						#default action
|	char_type							#default action
|	boolean_type						#default action
|	octet_type							#default action
|	any_type							#default action
;

/* 32 */	/* 3.8.3	Template Types */
template_type_spec
:	sequence_type						#default action
|	string_type							#default action
;

/* 33 */	/* 3.8.2	Constructed Types */
constr_type_spec
:	struct_type 						#default action
|	union_type							#default action
|	enum_type							#default action
;

/* 34 */
declarators
:	declarator							{ [$_[1]]; }
|	declarator	','	declarators			{ unshift(@{$_[3]},$_[1]); $_[3]; }
;

/* 35 */
declarator
:	simple_declarator					{ [$_[1]]; }
|	complex_declarator					#default action
;

/* 36 */
simple_declarator
:	IDENTIFIER							#default action
;

/* 37 */	/* 3.8.4	Complex Declarator */
complex_declarator
:	array_declarator					#default action
;

/* 38 */	/* 3.8.1	Basic Types */
floating_pt_type
:	FLOAT
		{
			new FloatingPtType($_[0],
					'value'				=>	$_[1]
			);
		}
|	DOUBLE
		{
			new FloatingPtType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 39 */
integer_type
:	signed_int							#default action
|	unsigned_int						#default action
;

/* 40 */
signed_int
:	signed_short_int					#default action
|	signed_long_int						#default action
;

/* 41 */
signed_long_int
:	LONG
		{
			new IntegerType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 42 */
signed_short_int
:	SHORT
		{
			new IntegerType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 43 */
unsigned_int
:	unsigned_short_int					#default action
|	unsigned_long_int					#default action
;

/* 44 */
unsigned_long_int
:	UNSIGNED	LONG
		{
			new IntegerType($_[0],
					'value'				=>	$_[1] . ' ' . $_[2]
			);
		}
;

/* 45 */
unsigned_short_int
:	UNSIGNED	SHORT
		{
			new IntegerType($_[0],
					'value'				=>	$_[1] . ' ' . $_[2]
			);
		}
;

/* 46 */
char_type
:	CHAR
		{
			new CharType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 47 */
boolean_type
:	BOOLEAN
		{
			new BooleanType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 48 */
octet_type
:	OCTET
		{
			new OctetType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 49 */
any_type
:	ANY
		{
			new AnyType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 50 */
struct_type
:	struct_header	'{'	member_list	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[1]->Configure($_[0],
					'list_expr'			=>	$_[3]
			);
		}
|	struct_header	'{'	error		'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("member excepted.\n");
			$_[0]->YYErrok();
		}
;

struct_header
:	STRUCT	IDENTIFIER
		{
			new StructType($_[0],
					'idf'				=>	$_[2]
			);
		}
;

/* 51 */
member_list
:	member								{ [$_[1]]; }
|	member	member_list					{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 52 */
member
:	type_spec	declarators	';'
		{
			new Members($_[0],
					'type'				=>	$_[1],
					'list_expr'			=>	$_[2]
			);
		}
|	type_spec	declarators	error
		{
			$_[0]->Error("';' excepted.\n");
			$_[0]->YYErrok();
			new Members($_[0],
					'type'				=>	$_[1],
					'list_expr'			=>	$_[2]
			);
		}
;

/* 53 */
union_type
:	union_header	SWITCH	'('	switch_type_spec	')'	'{'	switch_body	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[1]->Configure($_[0],
					'type'				=>	$_[4],
					'list_expr'			=>	$_[7]
			);
		}
|	union_header	SWITCH	'('	switch_type_spec	')'	'{'	error		'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("switch_body excepted.\n");
			$_[0]->YYErrok();
		}
|	union_header	SWITCH	'('	switch_type_spec	')'	error
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("'\x7b' excepted.\n");
			$_[0]->YYErrok();
		}
|	union_header	SWITCH	'('	error				')'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("switch_type_spec excepted.\n");
			$_[0]->YYErrok();
		}
|	union_header	SWITCH	error
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("'(' excepted.\n");
			$_[0]->YYErrok();
		}
;

union_header
:	UNION	IDENTIFIER
		{
			new UnionType($_[0],
					'idf'				=>	$_[2],
			);
		}
;

/* 54 */
switch_type_spec
:	integer_type						#default action
|	char_type							#default action
|	boolean_type						#default action
|	enum_type							#default action
|	scoped_name
		{
			TypeDeclarator->Lookup($_[0],$_[1]);
		}
;

/* 55 */
switch_body
:	case								{ [$_[1]]; }
|	case	switch_body					{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 56 */
case
:	case_labels	element_spec	';'
		{
			new Case($_[0],
					'list_label'		=>	$_[1],
					'element'			=>	$_[2]
			);
		}
|	case_labels	element_spec	error
		{
			$_[0]->Error("';' excepted.\n");
			$_[0]->YYErrok();
			new Case($_[0],
					'list_label'		=>	$_[1],
					'element'			=>	$_[2]
			);
		}
;

case_labels
:	case_label							{ [$_[1]]; }
|	case_label	case_labels				{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 57 */
case_label
:	CASE	const_exp	':'
		{
			$_[2];						# here only a expression, type is not known
		}
|	CASE	const_exp	error
		{
			$_[0]->Error("':' excepted.\n");
			$_[0]->YYErrok();
			$_[2];
		}
|	CASE	error
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
|	DEFAULT		':'
		{
			new Default($_[0]);
		}
|	DEFAULT		error
		{
			$_[0]->Error("':' excepted.\n");
			$_[0]->YYErrok();
			new Default($_[0]);
		}
;

/* 58 */
element_spec
:	type_spec	declarator
		{
			new Element($_[0],
					'type'			=>	$_[1],
					'list_expr'		=>	$_[2]
			);
		}
;

/* 59 */
enum_type
:	enum_header	'{'	enumerators	'}'
		{
			$_[1]->Configure($_[0],
					'list_expr'		=>	$_[3]
			)
					if (defined $_[1]);
		}
|	enum_header	'{'	error		'}'
		{
			$_[0]->Error("enumerator excepted.\n");
			$_[0]->YYErrok();
		}
|	enum_header	error
		{
			$_[0]->Error("'\x7b' excepted.\n");
			$_[0]->YYErrok();
		}
;

enum_header
:	ENUM	IDENTIFIER
		{
			new EnumType($_[0],
					'idf'				=>	$_[2],
			);
		}
|	ENUM	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
;

enumerators
:	enumerator							{ [$_[1]]; }
|	enumerator	','	enumerators			{ unshift(@{$_[3]},$_[1]); $_[3]; }
|	enumerator	','
		{
			$_[0]->Warning("',' unexcepted.\n");
			[$_[1]];
		}
|	enumerator	';'
		{
			$_[0]->Error("';' unexcepted.\n");
			[$_[1]];
		}
;

/* 60 */
enumerator
:	IDENTIFIER
		{
			new Enum($_[0],
					'idf'				=>	$_[1]
			);
		}
;

/* 61 */
sequence_type
:	SEQUENCE	'<'	simple_type_spec	','	positive_int_const	'>'
		{
			new SequenceType($_[0],
					'value'				=>	$_[1],
					'type'				=>	$_[3],
					'max'				=>	$_[5]
			);
		}
|	SEQUENCE	'<'	simple_type_spec	','	error				'>'
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
|	SEQUENCE	'<'	simple_type_spec	'>'
		{
			new SequenceType($_[0],
					'value'				=>	$_[1],
					'type'				=>	$_[3]
			);
		}
|	SEQUENCE	'<'	error  				'>'
		{
			$_[0]->Error("simple_type_spec excepted.\n");
			$_[0]->YYErrok();
		}
|	SEQUENCE	error
		{
			$_[0]->Error("'<' excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 62 */
string_type
:	STRING	'<'	positive_int_const	'>'
		{
			new StringType($_[0],
					'value'				=>	$_[1],
					'max'				=>	$_[3]
			);
		}
|	STRING
		{
			new StringType($_[0],
					'value'				=>	$_[1]
			);
		}
|	STRING	'<'	error				'>'
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 63 */
array_declarator
:	IDENTIFIER	fixed_array_sizes		{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

fixed_array_sizes
:	fixed_array_size					{ [$_[1]]; }
|	fixed_array_size	fixed_array_sizes
										{ unshift(@{$_[2]},$_[1]); $_[2]; }
;

/* 64 */
fixed_array_size
:	'['	positive_int_const	']'			{ $_[2]; }
|	'['	error				']'
		{
			$_[0]->Error("Expression excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 65 */	/* 3.11	Attribute Declaration */
attr_dcl
:	attr_mod	ATTRIBUTE	param_type_spec	simple_declarators
		{
			new Attributes($_[0],
					'modifier'			=>	$_[1],
					'type'				=>	$_[3],
					'list_expr'			=>	$_[4]
			);
		}
|	attr_mod	ATTRIBUTE	param_type_spec	error
		{
			$_[0]->Error("declarator excepted.\n");
			$_[0]->YYErrok();
		}
|	attr_mod	ATTRIBUTE	error
		{
			$_[0]->Error("type excepted.\n");
			$_[0]->YYErrok();
		}
;

attr_mod
:	READONLY							#default action
|	/* empty */							#default action
;

simple_declarators
:	simple_declarator					{ [$_[1]]; }
|	simple_declarator	','	simple_declarators
										{ unshift(@{$_[3]},$_[1]); $_[3]; }
;

/* 66 */	/* 3.9	Exception Declaration */
except_dcl
:	exception_header	'{'	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[1];
		}
|	exception_header	'{'	member_list	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[1]->Configure($_[0],
					'list_expr'			=>	$_[3]
			)
					if (defined $_[1]);
		}
|	exception_header	'{'	error	'}'
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("'members excepted.\n");
			$_[0]->YYErrok();
			$_[1]->Configure($_[0],
					'list_expr'			=>	$_[3]
			)
					if (defined $_[1]);
		}
|	exception_header	error
		{
			$_[0]->YYData->{symbtab}->PopCurrentScope($_[1]);
			$_[0]->Error("'\x7b' excepted.\n");
			$_[0]->YYErrok();
		}
;

exception_header
:	EXCEPTION	IDENTIFIER
		{
			new Exception($_[0],
					'idf'				=>	$_[2],
			);
		}
|	EXCEPTION	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
;

/* 67 */	/* 3.10	Operation Declaration */
op_dcl
:	op_header	parameter_dcls
		{
			delete $_[0]->YYData->{unnamed_symbtab}
					if (exists $_[0]->YYData->{unnamed_symbtab});
			$_[1]->Configure($_[0],
					'list_param'	=>	$_[2]
			)
					if (defined $_[1]);
		}
|	op_header	parameter_dcls	raises_expr
		{
			delete $_[0]->YYData->{unnamed_symbtab}
					if (exists $_[0]->YYData->{unnamed_symbtab});
			$_[1]->Configure($_[0],
					'list_param'	=>	$_[2],
					'list_raise'	=>	$_[3]
			)
					if (defined $_[1]);
		}
|	op_header	parameter_dcls	raises_expr	context_expr
		{
			delete $_[0]->YYData->{unnamed_symbtab}
					if (exists $_[0]->YYData->{unnamed_symbtab});
			$_[1]->Configure($_[0],
					'list_param'	=>	$_[2],
					'list_raise'	=>	$_[3],
					'list_context'	=>	$_[4]
			)
					if (defined $_[1]);
		}
|	op_header	parameter_dcls				context_expr
		{
			delete $_[0]->YYData->{unnamed_symbtab}
					if (exists $_[0]->YYData->{unnamed_symbtab});
			$_[1]->Configure($_[0],
					'list_param'	=>	$_[2],
					'list_context'	=>	$_[3]
			)
					if (defined $_[1]);
		}
|	op_header	error
		{
			delete $_[0]->YYData->{unnamed_symbtab}
					if (exists $_[0]->YYData->{unnamed_symbtab});
			$_[0]->Error("parameters declaration excepted.\n");
			$_[0]->YYErrok();
		}
;

op_header
:	op_mod	op_type_spec	IDENTIFIER
		{
			new Operation($_[0],
					'modifier'			=>	$_[1],
					'type'				=>	$_[2],
					'idf'				=>	$_[3]
			);
		}
|	op_mod	op_type_spec	error
		{
			$_[0]->Error("Identifier excepted.\n");
			$_[0]->YYErrok();
		}
;

op_mod
:	op_attribute						#default action
|	/* empty */							#default action
;

/* 68 */	/* 3.10.1	Operation Attribute */
op_attribute
:	ONEWAY								#default action
;

/* 69 */
op_type_spec
:	param_type_spec						#default action
|	VOID
		{
			new VoidType($_[0],
					'value'				=>	$_[1]
			);
		}
;

/* 70 */	/* 3.10.2	Parameter Declarations */
parameter_dcls
:	'('	param_dcls	')'
		{
			$_[2];
		}
|	'('	')'
		{
			undef;
		}
|	'('	error		')'
		{
			$_[0]->Error("parameters declaration excepted.\n");
			$_[0]->YYErrok();
		}
;

param_dcls
:	param_dcl							{ [$_[1]]; }
|	param_dcl	','	param_dcls			{ unshift(@{$_[3]},$_[1]); $_[3]; }
|	param_dcl	','
		{
			$_[0]->Warning("',' unexcepted.\n");
			[$_[1]];
		}
|	param_dcl	';'
		{
			$_[0]->Error("';' unexcepted.\n");
			[$_[1]];
		}
;

/* 71 */
param_dcl
:	param_attribute	param_type_spec	simple_declarator
		{
			new Parameter($_[0],
					'attr'				=>	$_[1],
					'type'				=>	$_[2],
					'idf'				=>	$_[3]
			);
        }
;

/* 72 */
param_attribute
:	IN									#default action
|	OUT									#default action
|	INOUT								#default action
;

/* 73 */	/* 3.10.3	Raises Expressions */
raises_expr
:	RAISES	'('	exception_names	')'
		{
			$_[3];
		}
|	RAISES	'('	error			')'
		{
			$_[0]->Error("name excepted.\n");
			$_[0]->YYErrok();
		}
|	RAISES	error
		{
			$_[0]->Error("'(' excepted.\n");
			$_[0]->YYErrok();
		}
;

exception_names
:	exception_name							{ [$_[1]]; }
|	exception_name	','	exception_names		{ unshift(@{$_[3]},$_[1]); $_[3]; }
;

exception_name
:	scoped_name
		{
			Exception->Lookup($_[0],$_[1]);
		}
;

/* 74 */	/* 3.10.4	Context Expressions */
context_expr
:	CONTEXT	'('	string_literals	')'
		{
			$_[3];
		}
|	CONTEXT	'('	error			')'
		{
			$_[0]->Error("string excepted.\n");
			$_[0]->YYErrok();
		}
|	CONTEXT	error
		{
			$_[0]->Error("'(' excepted.\n");
			$_[0]->YYErrok();
		}
;

string_literals
:	string_literal						{ [$_[1]]; }
|	string_literal	','	string_literals	{ unshift(@{$_[3]},$_[1]); $_[3]; }
;

/* 75 */
param_type_spec
:	base_type_spec						#default action
|	string_type							#default action
|	scoped_name
		{
			TypeDeclarator->Lookup($_[0],$_[1]);
		}
;

%%

use strict;
use CORBA::IDL::symbtab;
use CORBA::IDL::node;

require CORBA::IDL::lexer;

sub BuildUnop
{
	my($op,$expr) = @_;

	my $node = new UnaryOp($_[0],	'op'	=>	$op);
	push(@$expr,$node);
	return $expr;
}

sub BuildBinop
{
	my($left,$op,$right) = @_;

	my $node = new BinaryOp($_[0],	'op'	=>	$op);
	push(@$left,@$right);
	push(@$left,$node);
	return $left;
}

